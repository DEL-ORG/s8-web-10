pipeline {
    agent any
    
    triggers {
        githubPush()
    }
    options {
        timeout(time: 30, unit: 'MINUTES') // Timeout for the entire pipeline
        buildDiscarder(logRotator(numToKeepStr: '7')) // Discard old builds to save disk space
        disableConcurrentBuilds() // Ensures that only one build can run at a time
        timestamps() // Adds timestamps to the console output
        skipDefaultCheckout() // Skips the default checkout of source code, useful if you're doing a custom checkout
        // retry(3) // Automatically retries the entire pipeline up to 3 times if it fails
    }
    environment {
        DOCKER_HUB_USERNAME="devopseasylearning"
        ALPHA_APPLICATION_01_REPO="alpha-application-01"
        ALPHA_APPLICATION_02_REPO="alpha-application-02"
        DOCKER_CREDENTIAL_ID = 's8-test-docker-hub-auth'
    }
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'dev2', description: '')
        string(name: 'APP1_TAG', defaultValue: 'latest', description: '')
        string(name: 'APP2_TAG', defaultValue: 'latest', description: '')
        string(name: 'PORT_ON_DOCKER_HOST', defaultValue: '', description: '')
    }
    stages {
        // when {
        //         expression {
        //             params.BRANCH_NAME == 'dev'
        //         }
        //     }
        // stage ('Check Allow Users') {
        //     steps {
        //         script {
        //             wrap([$class: 'BuildUser']) {
        //                 def build_id = env.BUILD_USER_ID
        //                 def build_user = env.BUILD_USER
        //                 echo "build_id : $build_id"
        //                 if (build_id in ['corneillechahoua', 'admin']) {
        //                     echo "Hi $build_user, You are allowed to run this job"
        //                 } else {
        //                     error "Hi $build_user, You are not allowed to run this job"
        //                 }
        //             }
        //         }
        //     }
        // }
        stage('Sanity Check') {
             when {
                expression {
                    params.BRANCH_NAME == 'dev2'
                }
            }
            steps {
                script {
                    sanity_check()
                }
            }
        }
        stage('Clone Repository') {
            when {
                expression {
                    params.BRANCH_NAME == 'dev2'
                }
            }
            steps {
                script {
                    git credentialsId: 'jenkins-ssh-agents-private-key',
                        url: 'git@github.com:DEL-ORG/s8-web-2.git',
                        branch: "${params.BRANCH_NAME}"
                }
            }
        }
        stage('Building Sonar Image') {
             when {
                expression {
                    params.BRANCH_NAME == 'dev2'
                }
            }
            steps {
                script {
                    dir("${WORKSPACE}/sonar-scanner") {
                        sh """
                        docker build -t ${env.DOCKER_HUB_USERNAME}/s8-sonar-scanner:latest  .
                        docker images
                        """
                    }
                }
            }
        }
        stage('SonarQube analysis') {
             when {
                expression {
                    params.BRANCH_NAME == 'dev2'
                }
            }
            steps {
                script {
                    dir("${WORKSPACE}") {
                        docker.image("devopseasylearning/s8-sonar-scanner:latest").inside('-u 0:0') {
                            withSonarQubeEnv('SonarScanner2') {
                                sh """
                                    ls -l 
                                    pwd
                                    sonar-scanner -v
                                    sonar-scanner
                                """
                            }
                        }
                    }
                }
            }
        }
        stage('Building Application 01') {
             when {
                expression {
                    params.BRANCH_NAME == 'dev2'
                }
            }
            steps {
                script {
                    sh """
                        docker build -t ${env.DOCKER_HUB_USERNAME}/app-01:${params.APP1_TAG} -f application-01.Dockerfile .
                        docker images
                    """
                }
            }
        }
        stage('Building Application 02') {
             when {
                expression {
                    params.BRANCH_NAME == 'dev2'
                }
            }
            steps {
                script {
                    sh """
                        docker build -t ${env.DOCKER_HUB_USERNAME}/app-02:${params.APP2_TAG} -f application-02.Dockerfile .
                        docker images
                    """
                }
            }
        }
        stage('Login into') {
            steps {
                script {
                    // Login to Docker Hub
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIAL_ID}", 
                    usernameVariable: 'DOCKER_USERNAME', 
                    passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Use Docker CLI to login
                        sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
                    }
                }
            }
        }
        stage('Pushing into Docker Hub') {
             when {
                expression {
                    params.BRANCH_NAME == 'dev'
                }
            }
            steps {
                script {
                    pushDockerhub()
                }
            }
        } 
        stage('Updating the compose file') {
            steps {
                script {
                    dir("${WORKSPACE}/docker-compose") {
                        sh """
                        sed -i "s|APP_1_IMAGE_TAG|${params.APP1_TAG}|g" docker-compose.yml
                        sed -i "s|APP_2_IMAGE_TAG|${params.APP2_TAG}|g" docker-compose.yml
                        cat docker-compose.yml
                        """
                    }
                }
            }
        }
        stage('Deploying the application') {
            steps {
                script {
                    dir("${WORKSPACE}/docker-compose") {
                        sh """
                        docker-compose up -d
                        sleep 10
                        docker ps |grep -i app
                        """
                    }
                }
            }
        }
    }
    post {
        success {
            slackSend color: '#2EB67D',
            channel: 's8-session-jenkins-alerts', 
            message: "*Alpha Project Build Status*" +
            "\n Project Name: Alpha" +
            "\n Job Name: ${env.JOB_NAME}" +
            "\n Build number: ${currentBuild.displayName}" +
            "\n Build Status : *SUCCESS*" +
            "\n Build url : ${env.BUILD_URL}"
        }
        failure {
            slackSend color: '#E01E5A',
            channel: 's8-session-jenkins-alerts',  
            message: "*Alpha Project Build Status*" +
            "\n Project Name: Alpha" +
            "\n Job Name: ${env.JOB_NAME}" +
            "\n Build number: ${currentBuild.displayName}" +
            "\n Build Status : *FAILED*" +
            "\n Action : Please check the console output to fix this job IMMEDIATELY" +
            "\n Build url : ${env.BUILD_URL}"
        }
        unstable {
            slackSend color: '#ECB22E',
            channel: 's8-session-jenkins-alerts', 
            message: "*Alpha Project Build Status*" +
            "\n Project Name: Alpha" +
            "\n Job Name: ${env.JOB_NAME}" +
            "\n Build number: ${currentBuild.displayName}" +
            "\n Build Status : *UNSTABLE*" +
            "\n Action : Please check the console output to fix this job IMMEDIATELY" +
            "\n Build url : ${env.BUILD_URL}"
        }   
    }
}

def pushDockerhub() {
    sh """
        docker push ${env.DOCKER_HUB_USERNAME}/app-01:${params.APP1_TAG}
        docker push ${env.DOCKER_HUB_USERNAME}/app-02:${params.APP2_TAG}
        docker push ${env.DOCKER_HUB_USERNAME}/s8-sonar-scanner:latest
    """
}

def sanity_check() {
    if (params.BRANCH_NAME.isEmpty()){
       echo "The parameter BRANCH_NAME is not set"
       sh 'exit 2'
   }
   if (params.APP1_TAG.isEmpty()){
       echo "The parameter APP1_TAG is not set"
       sh 'exit 2'
    }
    if (params.APP2_TAG.isEmpty()){
       echo "The parameter APP2_TAG is not set"
       sh 'exit 2'
    }
}
