pipeline {
    agent any
    
    triggers {
        githubPush()
    }
    options {
        timeout(time: 10, unit: 'MINUTES') // Timeout for the entire pipeline
        buildDiscarder(logRotator(numToKeepStr: '7')) // Discard old builds to save disk space
        disableConcurrentBuilds() // Ensures that only one build can run at a time
        timestamps() // Adds timestamps to the console output
        skipDefaultCheckout() // Skips the default checkout of source code, useful if you're doing a custom checkout
        retry(3) // Automatically retries the entire pipeline up to 3 times if it fails
    }
    environment {
        DOCKER_HUB_USERNAME="devopseasylearning"
        ALPHA_APPLICATION_01_REPO="alpha-application-01"
        ALPHA_APPLICATION_02_REPO="alpha-application-02"
        DOCKER_CREDENTIAL_ID = 's8-test-docker-hub-auth'
    }
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 's8tia', description: '')
        string(name: 'APP1_TAG', defaultValue: 'latest', description: '')
        string(name: 'APP2_TAG', defaultValue: 'latest', description: '')
        string(name: 'PORT_ON_DOCKER_HOST', defaultValue: '', description: '')
    }
    stages {
        stage('Sanity Check') {
            steps {
                script {
                    sanity_check()
                }
            }
        }
        stage('Clone Repository') {
            when {
                expression {
                    params.BRANCH_NAME == 's8tia'
                }
            }
            steps {
                script {
                    git credentialsId: 'jenkins-ssh-agents-private-key',
                        url: 'git@github.com:DEL-ORG/s8-web-2.git',
                        branch: "${params.BRANCH_NAME}"
                }
            }
        }
         
        // after we push SonarQube to Docker hub, we apply SonarQube analysis
        stage('SonarQube analysis') {
            steps {
                script {
                    dir("${WORKSPACE}") {
                        docker.image("devopseasylearning/s8-sonar-scanner:latest").inside('-u 0:0') {
                            withSonarQubeEnv('SonarScanner') {
                                sh """
                                    ls -l 
                                    pwd
                                    sonar-scanner -v
                                    sonar-scanner
                                """
                            }
                        }
                    }
                }
            }
        }
        
        
    }
}



def sanity_check() {
    if (params.BRANCH_NAME.isEmpty()){
       echo "The parameter BRANCH_NAME is not set"
       sh 'exit 2'
   } 
}