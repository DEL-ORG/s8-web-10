pipeline {
    agent { label "SERVER03" }
    
    triggers {
        githubPush()
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '4')) // Discard old builds to save disk space
        disableConcurrentBuilds() // Ensures that only one build can run at a time
        timestamps() // Adds timestamps to the console output
        skipDefaultCheckout() // Skips the default checkout of source code, useful if you're doing a custom checkout
        // retry(3) // Uncomment if you want to retry the entire pipeline up to 3 times if it fails
    }
    
    environment {
        DOCKER_HUB_USERNAME = "devopseasylearning"
        ALPHA_APPLICATION_01_REPO = "alpha-application-01"
        ALPHA_APPLICATION_02_REPO = "alpha-application-02"
        DOCKER_CREDENTIAL_ID = 's8-test-docker-hub-auth'
    
    }
    
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 's8kevinaf02', description: 'Branch name to build')
        string(name: 'APP1_TAG', defaultValue: 'latest', description: 'Tag for Application 01')
        string(name: 'APP2_TAG', defaultValue: 'latest', description: 'Tag for Application 02')
        string(name: 'PORT_ON_DOCKER_HOST', defaultValue: '', description: 'Port on Docker host')
    }
    
    stages {
        // stage ('Check Allow Users') {
        //     steps {
        //         script {
        //             wrap([$class: 'BuildUser']) {
        //                 def build_id = env.BUILD_USER_ID
        //                 def build_user = env.BUILD_USER
        //                 echo "build_id : $build_id"
        //                 if (build_id in ['kevin.kipkoech.ug', 'admin']) {
        //                     echo "Hi $build_user, You are allowed to run this job"
        //                 } else {
        //                     error "Hi $build_user, You are not allowed to run this job"
        //                 }
        //             }
        //         }
        //     }
        // }
        stage('Sanity Check') {
            steps {
                script {
                    sanity_check()
                }
            }
        }
        
        stage('Clone Repository') {
            when {
                expression {
                    params.BRANCH_NAME == 's8kevinaf02'
                }
            }
            steps {
                script {
                    git credentialsId: 'jenkins-ssh-agents-private-key',
                        url: 'git@github.com:DEL-ORG/s8-web-2.git',
                        branch: "${params.BRANCH_NAME}"
                }
            }
        }
        
        stage('Building Sonar Image') {
            steps {
                script {
                    dir("${WORKSPACE}/sonar-scanner") {
                        sh """
                        docker build -t ${env.DOCKER_HUB_USERNAME}/s8-sonar-scanner:latest .
                        docker images
                        """
                    }
                }
            }
        }
        
        stage('Run Sonar Scanner') {
            steps {
                script {
                    dir("${WORKSPACE}") {
                        docker.image("${env.DOCKER_HUB_USERNAME}/s8-sonar-scanner:latest").inside('-u 0:0') {
                            withSonarQubeEnv('Sonar') {
                                sh """
                                    ls -l 
                                    pwd
                                    sonar-scanner -v
                                    sonar-scanner
                                """
                            }
                        }
                    }
                }
            }
        }
        
        stage('Building Application 01') {
            when {
                expression {
                    params.BRANCH_NAME == 's8kevinaf02'
                }
            }
            steps {
                script {
                    sh """
                        docker build -t ${env.DOCKER_HUB_USERNAME}/app-01:${BUILD_NUMBER} -f application-01.Dockerfile .
                        docker images
                    """
                }
            }
        }
        
        stage('Building Application 02') {
            when {
                expression {
                    params.BRANCH_NAME == 's8kevinaf02'
                }
            }
            steps {
                script {
                    sh """
                        docker build -t ${env.DOCKER_HUB_USERNAME}/app-02:${BUILD_NUMBER} -f application-02.Dockerfile .
                        docker images
                    """
                }
            }
        }
        
        stage('Login to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIAL_ID}", 
                    usernameVariable: 'DOCKER_USERNAME', 
                    passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Use Docker CLI to login
                        sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
                    }
                }
            }
        }
        
        stage('Push Images to Docker Hub') {
            steps {
                script {
                    sh """
                        docker push ${env.DOCKER_HUB_USERNAME}/app-01:${BUILD_NUMBER}
                        docker push ${env.DOCKER_HUB_USERNAME}/app-02:${BUILD_NUMBER}
                        docker push ${env.DOCKER_HUB_USERNAME}/s8-sonar-scanner:latest
                    """
                }
            }
        }
        
        stage('Test Timeout') {
            steps {
                script {
                    sleep 1 // This stage is for testing purposes; adjust as needed
                }
            }
        }
    }
}

def sanity_check() {
    if (params.BRANCH_NAME.isEmpty()) {
        error "The parameter BRANCH_NAME is not set"
    }
}
