pipeline {
    agent {
        label "SERVER03"
    }
    
    triggers {
        githubPush()
    }
    options {
        timeout(time: 10, unit: 'MINUTES') // Timeout for the entire pipeline
        buildDiscarder(logRotator(numToKeepStr: '3')) // Discard old builds to save disk space
        disableConcurrentBuilds() // Ensures that only one build can run at a time
        timestamps() // Adds timestamps to the console output
        // skipDefaultCheckout() // Skips the default checkout of source code, useful if you're doing a custom checkout
        // retry(3) // Automatically retries the entire pipeline up to 3 times if it fails
    }
    environment {
        DOCKER_HUB_USERNAME="devopseasylearning"
        ALPHA_APPLICATION_01_REPO="s5ludivine-application-01"
        ALPHA_APPLICATION_02_REPO="s5ludivine-application-02"
        DOCKER_CREDENTIAL_ID = 's8-test-docker-hub-auth'
    }
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 's8elisa', description: '')
        string(name: 'APP1_TAG', defaultValue: 'latest', description: '')
        string(name: 'APP2_TAG', defaultValue: 'latest', description: '')
        string(name: 'PORT_ON_DOCKER_HOST', defaultValue: '', description: '')
        booleanParam(name: 'RUN_STAGES', defaultValue: false, description: 'Run stages')
        booleanParam(name: 'DELETE_APPLICATION', defaultValue: false, description: 'Delete Application')
        booleanParam(name: 'SKIP_STAGES', defaultValue: false, description: 'Skip stages building and pushing image')
    }
    stages {
        // stage ('Check Allow Users') {
        //     steps {
        //         script {
        //             wrap([$class: 'BuildUser']) {
        //                 def build_id = env.BUILD_USER_ID
        //                 def build_user = env.BUILD_USER
        //                 echo "build_id : $build_id"
        //                 if (build_id in ['corneillechahoua', 'admin']) {
        //                     echo "Hi $build_user, You are allowed to run this job"
        //                 } else {
        //                     error "Hi $build_user, You are not allowed to run this job"
        //                 }
        //             }
        //         }
        //     }
        // }
        stage('Sanity Check') {
            steps {
                script {
                    sanity_check()
                }
            }
        }
        stage('Clone Repository') {
            when {
                expression {
                expression { params.RUN_STAGES }

                params.BRANCH_NAME == 's8elisa'
                }
            }
            steps {
                script {
                    git credentialsId: 'jenkins-ssh-agents-private-key',
                        url: 'git@github.com:DEL-ORG/s8-web-2.git',
                        branch: "${params.BRANCH_NAME}"
                }
            }
        }
        stage('Building Sonar Image') {
            steps {
                script {
                    dir("${WORKSPACE}/sonar-scanner") {
                        sh """
                        docker build -t ${env.DOCKER_HUB_USERNAME}/s8-sonar-scanner:latest  .
                        docker images
                        """
                    }
                }
            }
        }
        stage('SonarQube analysis') {
            steps {
                script {
                    dir("${WORKSPACE}") {
                        docker.image("devopseasylearning/s8-sonar-scanner:latest").inside('-u 0:0') {
                            withSonarQubeEnv('SonarScanner') {
                                sh """
                                    ls -l 
                                    pwd
                                    sonar-scanner -v
                                    sonar-scanner
                                """
                            }
                        }
                    }
                }
            }
        }
        // stage('Building Application 01') {
        //     when {
        //         expression {
        //             params.BRANCH_NAME == 's8elisa'
        //         }
        //     }
        //     steps {
        //         script {
        //             sh """
        //                 docker build -t ${env.DOCKER_HUB_USERNAME}/app-01:${BUILD_NUMBER}_ludi -f application-01.Dockerfile .
        //                 docker images
        //             """
        //         }
        //     }
        // }
        stage('Building Application 02') {
            when {
                expression {
                    params.BRANCH_NAME == 's8elisa'
                }
            }
            steps {
                script {
                    sh """
                        docker build -t ${env.DOCKER_HUB_USERNAME}/app-02:${BUILD_NUMBER}_ludi -f application-02.Dockerfile .
                        docker images
                    """
                }
            }
        }

        stage('Building Application 03') {
            when {
                expression {
                    params.BRANCH_NAME == 's8elisa'
                }
            }
            steps {
                script {
                    sh """
                        docker build -t ${env.DOCKER_HUB_USERNAME}/app-03:${BUILD_NUMBER}_ludi -f application-03.Dockerfile .
                        docker images
                    """
                }
            }
        } 
        stage('Login into') {
            steps {
                script {
                    // Login to Docker Hub
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIAL_ID}", 
                    usernameVariable: 'DOCKER_USERNAME', 
                    passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Use Docker CLI to login
                        sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
                    }
                }
            }
        }
        stage('Pushing into Docker Hub') {
            steps {
                script {
                    sh """
                        docker push ${env.DOCKER_HUB_USERNAME}/app-02:${BUILD_NUMBER}_ludi
                        docker push ${env.DOCKER_HUB_USERNAME}/app-03:${BUILD_NUMBER}_ludi
                        docker push ${env.DOCKER_HUB_USERNAME}/s8-sonar-scanner:latest
                    """
                }
            }
        }
        // stage('Deployment') {
        //     when {
        //        expression {
        //     params.BRANCH_NAME == 's8elisa'
        //        }
        //     }
        //     steps {
        //        script {
        //     // Pull the latest version of your Docker images from Docker Hub
        //     // sh "docker pull ${env.DOCKER_HUB_USERNAME}/app-01:${BUILD_NUMBER}_ludi"
        //     sh "docker pull ${env.DOCKER_HUB_USERNAME}/app-02:${BUILD_NUMBER}_ludi"
        //     sh "docker pull ${env.DOCKER_HUB_USERNAME}/app-03:${BUILD_NUMBER}_ludi"
           
        //     sh "docker run -itd --name ludi-test001 -p 7896:80 ${env.DOCKER_HUB_USERNAME}/app-01:${BUILD_NUMBER}_ludi"
        //     sh "docker run -itd --name ludi-test002 -p 7897:80 ${env.DOCKER_HUB_USERNAME}/app-02:${BUILD_NUMBER}_ludi"
        //     sh "docker run -itd --name ludi-test002 -p 7897:80 ${env.DOCKER_HUB_USERNAME}/app-02:${BUILD_NUMBER}_ludi"
        //     sh "docker ps  |grep ludi-test1"
        //      sh "docker ps  |grep ludi-test2"
        //         }
        //     }
        // }


        stage('List Contents') {
            steps {
                script {
                    dir("${WORKSPACE}") {
                    withCredentials([
                        usernamePassword(credentialsId: 's8-test-docker-hub-auth', 
                        usernameVariable: 'DOCKER_HUB_USERNAME', 
                        passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                            docker.image("devopseasylearning/app-03":${BUILD_NUMBER}_ludi).inside('-u 0:0') {
                                sh """
                                    ls -l
                                """
                            }
                        }
                    }
                }
            }
        // }
        // stage('Configure AWS CLI') {
        //     steps {
        //         script {
        //             dir("${WORKSPACE}") {
        //             withCredentials([
        //                     [$class: 'AmazonWebServicesCredentialsBinding',
        //                     accessKeyVariable: 'AWS_ACCESS_KEY_ID',
        //                     credentialsId: "${env.AWS_CREADENTIALS_ID}",
        //                     secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],

        //                     usernamePassword(credentialsId: 'tia-dockehub-token', 
        //                     usernameVariable: 'DOCKER_HUB_USERNAME', 
        //                     passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
        //                         docker.image("devopseasylearning/jenkins-master-slave:latest").inside('-u 0:0') {
        //                         sh """
        //                             aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        //                             aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        //                             aws configure set default.region us-east-1

        //                             aws s3 ls
        //                         """
        //                     }
        //                 }
        //             }
        //         }
        //     }
        // }
        stage('Test timeout') {
            steps {
                script {
                    sleep 1
                }
            }
        }
    }
}

def customFunction() {
    sh """
        ls -l
        pwd
        uptime
    """
}


def sanity_check() {
    if (params.BRANCH_NAME.isEmpty()){
       echo "The parameter BRANCH_NAME is not set"
       sh 'exit 2'
   } 
}