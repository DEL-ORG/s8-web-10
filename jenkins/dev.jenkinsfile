pipeline {
    agent { label "SERVER03" }
    
    triggers {
        githubPush()
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '4'))
        disableConcurrentBuilds()
        timestamps()
        skipDefaultCheckout()
    }
    environment {
        DOCKER_HUB_USERNAME = "devopseasylearning"
        ALPHA_APPLICATION_01_REPO = "alpha-application-01"
        ALPHA_APPLICATION_02_REPO = "alpha-application-02"
        DOCKER_CREDENTIAL_ID = 's8-test-docker-hub-auth'
    }
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 's8kevinaf02', description: '')
        string(name: 'APP1_TAG', defaultValue: 'latest', description: '')
        string(name: 'APP2_TAG', defaultValue: 'latest', description: '')
        string(name: 'PORT_ON_DOCKER_HOST', defaultValue: '', description: '')
    }
    stages {
        stage('Sanity Check') {
            steps {
                script {
                    sanity_check()
                }
            }
        }
        stage('Clone Repository') {
            when {
                expression {
                    params.BRANCH_NAME == 's8kevinaf02'
                }
            }
            steps {
                script {
                    git credentialsId: 'jenkins-ssh-agents-private-key',
                        url: 'git@github.com:DEL-ORG/s8-web-2.git',
                        branch: "${params.BRANCH_NAME}"
                }
            }
        }
        stage('Building Sonar Image') {
            steps {
                script {
                    dir("${WORKSPACE}/sonar-scanner") {
                        sh """
                        docker build -t ${env.DOCKER_HUB_USERNAME}/s8-sonar-scanner:latest .
                        docker images
                        """
                    }
                }
            }
        }
        stage('SonarQube analysis') {
            agent {
                docker {
                    image "devopseasylearning/s8-sonar-scanner:latest"
                    args "-u root"
                }
            }
            environment {
                CI = "true"
                scannerHome = "/opt/sonar-scanner"
                SONAR_USER_HOME = "${WORKSPACE}/.sonar"
            }
            steps {
                sh "mkdir -p ${SONAR_USER_HOME}"
                withSonarQubeEnv('SonarScanner') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }
        stage('Building Application 01') {
            when {
                expression {
                    params.BRANCH_NAME == 's8kevinaf02'
                }
            }
            steps {
                script {
                    sh """
                        docker build -t ${env.DOCKER_HUB_USERNAME}/app-01:${BUILD_NUMBER} -f application-01.Dockerfile .
                        docker images
                    """
                }
            }
        }
        stage('Building Application 02') {
            when {
                expression {
                    params.BRANCH_NAME == 's8kevinaf02'
                }
            }
            steps {
                script {
                    sh """
                        docker build -t ${env.DOCKER_HUB_USERNAME}/app-02:${BUILD_NUMBER} -f application-02.Dockerfile .
                        docker images
                    """
                }
            }
        }
        stage('Login into Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIAL_ID}", 
                    usernameVariable: 'DOCKER_USERNAME', 
                    passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
                    }
                }
            }
        }
        stage('Pushing into Docker Hub') {
            steps {
                script {
                    sh """
                        docker push ${env.DOCKER_HUB_USERNAME}/app-01:${BUILD_NUMBER}
                        docker push ${env.DOCKER_HUB_USERNAME}/app-02:${BUILD_NUMBER}
                        docker push ${env.DOCKER_HUB_USERNAME}/s8-sonar-scanner:latest
                    """
                }
            }
        }
        stage('Test timeout') {
            steps {
                script {
                    sleep 1
                }
            }
        }
    }
}

def sanity_check() {
    if (params.BRANCH_NAME.isEmpty()) {
        echo "The parameter BRANCH_NAME is not set"
        error 'Stopping build due to missing BRANCH_NAME parameter'
    }
}
